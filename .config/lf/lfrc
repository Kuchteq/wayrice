# user previews require the chafa program, lf sixel supported fork (for now):
# https://github.com/horriblename/lfimg-sixel
# and lfrun command (included in ~/.local/bin)
# if you want to look up what some keybindings do, use :maps command

set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml:lost+found"
set ratios 1:2:3
set sixel
set promptfmt "\033[33;1m%u\033[32;1m@\033[34;1m%h\033[0m:\033[35;1m%d\033[0m\033[1m%f\033[0m"
# Set previewer but make sure cache folder is in place
&{{ [ ! -d "$XDG_CACHE_HOME/lf" ] && mkdir --parents "$XDG_CACHE_HOME/lf" }}
set previewer '~/.config/lf/preview'
# make sure changing directories updates the titlebar
cmd on-cd &{{
    echo -ne "\033]7;file://$HOSTNAME$PWD\033\033]0;$PWD\033" > /dev/tty
}}
on-cd

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) setsid -f xdg-open $fx >/dev/null 2>&1 ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/x-shellscript) if [ "$f" = /mnt/nfs/connect ]; then ./connect; lf -remote "send $id reload"; else $EDITOR "$f"; fi;;
        text/*|application/json|application/javascript|inode/x-empty) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/*) setsid -f swayimg $f /dev/null 2>&1 ;;
	audio/*) mpv --audio-display=no $f ;;
	video/*|application/vnd.rn-realmedia) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/x-sc) sc-im "$f";;
	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
	application/vnd.sqlite3) lazysql "$f" ;;
        application/zip|application/x-xz) echo "File $fx is an archive. Would you like to unarchive it?"; read ans; [ "$ans" = "y" ] && lf -remote "send $id unarchive \"$f\"";;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir %{{
    printf "Directory Name: "
    read dir
    mkdir -p "$dir"
    lf -remote "send $id cd \"$dir\""
}}

cmd mkfile %{{
  printf "File Name: "
  read ans
  lf -remote "send $id $ $EDITOR \"$ans\""
}}

cmd makeowner %{{
    echo -n "New owner: " 
    read usr && sudo chown -R "$usr" "$f" && echo -n "File: $f has new owner: $usr"
    lf -remote "send $id :reload"
}}

cmd makeworkspace %{{
    echo -n "Workspace name (empty for $(basename "$PWD")): " 
    read ans
    [ -z "$ans" ] && ans=$(basename "$PWD")
    nvim --headless -c ":lua require('workspaces').add('$ans', '$PWD');" -c ":q"
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.gz) gunzip "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash %{{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}
    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd symlinkTravel &{{
	dest=$(realpath $f)
	if [ -f "$dest" ]; then
	 whereExactly=$(basename "$dest")
	 dest=$(dirname "$dest") 
	 lf -remote "send $id :cd '$dest'; select '$whereExactly'"
	else
	 lf -remote "send $id cd '$dest'"
	fi
}}

cmd symlinkSelectedPaste %{{ 
    if [ -z $fs ]; then
        echo -ne "\033[41;1mNo items selected for symlinking"
    else
	for s in $fs; do 
	  ln -s $(readlink -f "$fs") .
	done
    fi;
}}

cmd delsoftlink &{{
	for f in $fx; do 
	  if [ -h "$f" ]; then
                  rm $f
          else
                  notify-send -a "lf" "ó±‰† lf - delsoftlink: file not a soft link"  "file: ${f/$HOME/\~}"
          fi

	done
}}

cmd rpaste !{{
        for fi in $fs; do 
                rsync -r --progress "$fi" "$PWD";
        done
        notify-send "$(wc -l <<< $fs) files transfered"
}}

cmd watchInPlaylistSelected ${{
	mpv $fs
}}

cmd sendTo %{{
  [ -z $fs ] && echo "No files selected" && exit 1
  if [ -z "$WAYLAND_DISPLAY" ]; then
      echo "Rsync recipient: "
      read ans
  else 
    ans=$(cat "$XDG_DATA_HOME/receivers" | bemenu -p "rsync recipient: " ||  exit 1)
  fi
  case "$ans" in
        *: ) ;;
        * ) ans="$ans:" ;;
  esac;
  echo "Sending to $ans"
  rsync -r $fs "${ans}" >/dev/null && echo "$ans Received!" || echo "$ans Error Occured"
}}

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd convertToFormat %{{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	image/*) 
                extensions="jpg\npng\ngif\navif\nwebp\nheic\nppm\nico\n"
                function convertcmd {
                        convert "$1" "$2"
                } ;;
        audio/*)
                extensions="aac\nau\nflac\nm4a\nmid\nmidi\nmp3\nmpc\nogg\nra\nwav\noga\nopus\nspx\nxspf\n"
                function convertcmd {
                        ffmpeg -i "$1" "$2"
                } ;;
        video/*)
                extensions="mov\nmpg\nmpeg\nm2v\nmkv\nwebm\nogm\nmp4\nm4v\nmp4v\n"
                function convertcmd {
                        ffmpeg -i "$1" "$2"
                } ;;
        *) 
                notify-send "No conversion possibility detected"
                exit 1;;
    esac
    ext="${f##*.}"
    base="${f%.*}"
    extensions=$(sed "s/$ext\\\n//" <<< "$extensions")
    if [ -z "${WAYLAND_DISPLAY+x}" ]; then
          echo -e "Convert to: $(sed 's/\\n/ /g'  <<< $extensions): "
          read ans
    else 
          #ans=$(printf "$extensions" | tofi -p "Convert to: " 2>/dev/null)
          ans=$(printf "$extensions" | tofi 2>/dev/null)
    fi
    out="$base.$ans"
    convertcmd "$f" "$out"

    notify-send "$out"
    lf -remote "send $id select \"$out\""
}}

cmd transformResize %{{
        if [[ "$(file -b --mime-type $f)" != image/* ]]; then
                echo -ne "\033[41;1mFile is not an image"
                exit 1
        fi
        ext="${f##*.}"
        base="${f%.*}"
        printf "Desired size (120x120 format): "
        read size
        convert "$f" -resize "$size" "${base}_$size.$ext"
}}

cmd inspect ${{ 
        if [ -d "$f" ]; then
                tree -C "$f" | less
        else
                case "$(file --dereference --brief --mime-type -- "$f")" in
                application/gzip) tar tzf "$f" | less ;;
                application/*zip | application/java-archive) unzip -l "$f" | less ;;
                *) bat --paging always "$f"  ;;
                esac
        fi
}}

# on pressing q send the suspend signal to the parent shell
cmd quitfreeze ${{
     echo -n "$id" > "$LAST_DIR_PATH"   
     echo -n " $PWD" >> "$LAST_DIR_PATH"   
     kill -TSTP $PPID
}}

cmd gototmp &{{
  [ ! -d "/tmp/$USER-tmp" ] && mkdir "/tmp/$USER-tmp" 
  lf -remote "send $id cd \"/tmp/$USER-tmp\""
}}


cmd tag-clear :tag; tag-toggle

# two command which get called externally
cmd invim source "~/.config/lf/invim"

# Binds mapped to the commands
map M
map Md mkdir
map Mf mkfile
map Me &chmod u+x $f && lf -remote "send :reload" # make executable
map Mo makeowner 
map Mw makeworkspace 
map Mh $hui -c ":lua set_new_workspace('$(basename $PWD)','$PWD/.hurl')"
map au unarchive
map DD trash
map Dl delsoftlink
map Dr $trash-restore
map <c-l> symlinkTravel
map P symlinkSelectedPaste
map W watchInPlaylistSelected
map Yd &echo -n $PWD | wl-copy; lf -remote "send $id echo 'Yanked dir $PWD to clipboard" # cd into the copied path
map Yf &echo -n $f | wl-copy; lf -remote "send $id echo 'Yanked file $f to clipboard" # cd into the copied path
map Ya &wl-copy < $f; lf -remote "send $id echo 'Yanked all $f to clipboard'" #yank all contents 
map <c-r> :reload; &killall bat
map x :set info size; calcdirsize # x as in examine for size
map Su $sudo lf -command 'source "~/.config/lf/insudo"';

# Other less complex binds

map w # Don't really need to enter shell on w, I usually just quit lf
# Instead, make w chose some predefined filters
map wc setfilter 
map wp setfilter ".pdf"
map wi filter

map O :set dirpreviews!; reload # O as in overview, this turns the third column into tree output

# Basic Functions
map . set hidden!
map <enter> open
map R push :rename<enter><c-k>.
map B bulkrename
map Z middle
map am $addshortcut $f
map o $mimeopen -a "$f" 2>/dev/null
# Remember ' is a special mark which saves the previous path , so by pressing double '' 
# you get back to the previous folder, i.e. using mark-load. This is also mapped to tab
map <tab> push ''
map gcl $git clone "$(wl-paste)"
map g/ cd /
map gv $lf -remote "send $id select \"$(env | fzf -i | cut -d= -f2)\"" # fuzzy cd by env variable
map i inspect
map Â© &lf -remote "send $id cd '$(git rev-parse --show-toplevel)'"

# call qr sharing in the current folder
map Us &setsid -f qrshare $fx >/dev/null 2>&1
map Ur &setsid -f qrshare -r >/dev/null 2>&1

map <c-f> $lf -remote "send $id select \"$(fzf)\"" # fuzzy find files
map <c-e> $lf -remote "send $id select \"$(FZF_DEFAULT_COMMAND='fd -td' fzf)\"" # fuzzy find directories
map <c-g> $nvim -c ":lua startInTelescopeOnly()" # live grep files
map <c-s> sendTo
map <c-space> &foot -o environment.START_IN_LFCD=true -o environment.LFCD_FOCUSPATH="$f"

# transform functions related to files/mostly images
map Tu $/opt/upscayl/upscayl-bin -v -n realesrgan-x4plus -i $f -o "${f%.*}-upscaled.${f##*.}"
map Tt convertToFormat
map Tr transformResize
map Tv $vtracer --input $f --output "${f%.*}.svg"
map C $git diff $f
map e
map ee $nvim -c ":lua startInDebug()"
map ei $nvim $f
map ef $exiftool $f | bat --file-name "$f" --language YAML --paging always
map _ &dragon-drop -x "$f"
map â€¢ shell-async # <altgr+space> far easier to reach than &
map gtm gototmp
map gnf cd /mnt/nfs
map at cd ~/atm # there's also gat since atm isn't we can save one keystroke

cmd on-quit-freeze map q quitfreeze 
cmd on-quit &{{ marks=~/.local/share/lf/marks; sed -i "/^q/d" "$marks"; echo "q:$PWD" >> "$marks"; }}

source "~/.config/lf/shortcutrc"
